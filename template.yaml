AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  discord-ec2-server-manager

Globals:
  Function:
    Runtime: nodejs20.x

Parameters:
  AwsRegion:
    Type: String
  BotApplicationId:
    Type: String
  BotPublicKey:
    Type: String
  BotClientSecret:
    Type: String
  S3BucketName:
    Type: String
  S3StartServerScriptPath:
    Type: String
  EC2KeyName:
    Type: String
    Default: 'ec2-server-key'
  EC2InstanceType:
    Type: String
    Default: 't3a.micro'
  EC2ImageId:
    Type: String
    Default: 'ami-008fe2fc65df48dac' # Ubuntu Server 22.04 LTS, SSD Volume Type, x86 
  EBSStorageSizeGB:
    Type: Number
    Default: 20
  ServerUrl:
    Type: String

Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "S3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:ListBucket"
                Resource: !Sub "arn:aws:s3:::${S3BucketName}"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource:
                  - !Sub "arn:aws:s3:::${S3BucketName}/*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: EC2Role

  EC2SSHKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Ref EC2KeyName

  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for the EC2 instance'
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 15636
          ToPort: 15637
          IpProtocol: udp
        - CidrIp: '0.0.0.0/0'
          FromPort: 2456
          ToPort: 2458
          IpProtocol: udp
        - CidrIp: '0.0.0.0/0'
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp

  EC2ServerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref EC2ImageId
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref EC2SSHKeyPair
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref EBSStorageSizeGB
            VolumeType: gp3
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash
          sudo apt-get update
          sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt install unzip
          sudo unzip awscliv2.zip
          sudo ./aws/install
          cd /home/ubuntu
          sudo mkdir -p server-files
          sudo aws s3 cp s3://${S3BucketName}/server-files/ /home/ubuntu/server-files/ --recursive
          sudo chmod +x /home/ubuntu/server-files/${S3StartServerScriptPath}
          /home/ubuntu/server-files/${S3StartServerScriptPath}

  Ec2StatusControllerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: build/ec2-status-controller/
      Handler: ec2StatusController.default
      Timeout: 30
      Layers:
        - !Ref NodeModulesDependencyLayer
      Architectures:
        - x86_64
      Events:
        DailyShutdownEvent:
          Type: Schedule
          Properties:
            Schedule: cron(30 10 * * ? *) # Runs every day at 02:30 AM PST (UTC-8)
            Input: '{ "isScheduledShutdown": true }'
      Policies:
        - EC2DescribePolicy: {}
        - Statement:
          - Sid: AllowEC2LifecycleManagement
            Effect: Allow
            Action:
            - ec2:StartInstances
            - ec2:StopInstances
            Resource: '*'
      Environment:
        Variables:
          REGION:
            Ref: AwsRegion
          BOT_APPLICATION_ID:
            Ref: BotApplicationId
          BOT_PUBLIC_KEY:
            Ref: BotPublicKey
          BOT_CLIENT_SECRET:
            Ref: BotClientSecret
          INSTANCE_ID: !Ref EC2ServerInstance
          SERVER_URL:
            Ref: ServerUrl

  BotRequestHandlerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: build/bot-request-handler/
      Handler: botRequestHandler.default
      Timeout: 5
      Layers:
        - !Ref NodeModulesDependencyLayer
      Architectures:
        - x86_64
      Events:
        BotRequestHandler:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /bot_request
            Method: POST
      Policies:
        - LambdaInvokePolicy:
            FunctionName:
              !Ref Ec2StatusControllerFunction
      Environment:
        Variables:
          REGION:
            Ref: AwsRegion
          BOT_PUBLIC_KEY:
            Ref: BotPublicKey
          RESPONSE_FUNC_ARN: !GetAtt Ec2StatusControllerFunction.Arn

  NodeModulesDependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: nodejs-dependencies
      Description: Node Modules
      ContentUri: dependencies/
      CompatibleRuntimes:
        - nodejs20.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

Outputs:
  Ec2StatusControllerFunction:
    Description: "EC2 Status Controller Lambda Function ARN"
    Value: !GetAtt Ec2StatusControllerFunction.Arn
  Ec2StatusControllerFunctionIamRole:
    Description: "Implicit IAM Role created for EC2 Status Controller function"
    Value: !GetAtt Ec2StatusControllerFunctionRole.Arn
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  DiscordEC2ServerManagerApi:
    Description: "API Gateway endpoint URL for Prod stage to trigger Bot Request Handler function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  BotRequestHandlerFunction:
    Description: "Bot Request Handler Lambda Function ARN"
    Value: !GetAtt BotRequestHandlerFunction.Arn
  BotRequestHandlerFunctionIamRole:
    Description: "Implicit IAM Role created for Bot Request Handler function"
    Value: !GetAtt BotRequestHandlerFunctionRole.Arn
  InstanceId:
    Description: 'ID of the created EC2 instance'
    Value: !Ref EC2ServerInstance
  PublicDnsName:
    Description: 'Public DNS name of the created EC2 instance'
    Value: !GetAtt EC2ServerInstance.PublicDnsName

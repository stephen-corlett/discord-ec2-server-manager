AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  discord-ec2-server-manager

Globals:
  Function:
    Runtime: nodejs16.x

Parameters:
  AwsRegion:
    Type: String
  BotApplicationId:
    Type: String
  BotPublicKey:
    Type: String
  BotClientSecret:
    Type: String
  EC2InstanceId:
    Type: String

Resources:
  Ec2StatusControllerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: build/ec2-status-controller/
      Handler: app.default
      Timeout: 60
      Layers:
        - !Ref NodeModulesDependencyLayer
      Architectures:
        - x86_64
      Policies:
        - EC2DescribePolicy: {}
        - Statement:
          - Sid: AllowEC2LifecycleManagement
            Effect: Allow
            Action:
            - ec2:StartInstances
            - ec2:StopInstances
            Resource: '*'
      Environment:
        Variables:
          REGION:
            Ref: AwsRegion
          BOT_APPLICATION_ID:
            Ref: BotApplicationId
          BOT_PUBLIC_KEY:
            Ref: BotPublicKey
          BOT_CLIENT_SECRET:
            Ref: BotClientSecret
          INSTANCE_ID:
            Ref: EC2InstanceId
  BotRequestHandlerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: build/bot-request-handler/
      Handler: app.default
      Timeout: 5
      Layers:
        - !Ref NodeModulesDependencyLayer
      Architectures:
        - x86_64
      Events:
        BotRequestHandler:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /bot_request
            Method: POST
      Policies:
        - LambdaInvokePolicy:
            FunctionName:
              !Ref Ec2StatusControllerFunction
      Environment:
        Variables:
          REGION:
            Ref: AwsRegion
          BOT_PUBLIC_KEY:
            Ref: BotPublicKey
          RESPONSE_FUNC_ARN: !GetAtt Ec2StatusControllerFunction.Arn
  NodeModulesDependencyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: nodejs-dependencies
      Description: Node Modules
      ContentUri: dependencies/
      CompatibleRuntimes:
        - nodejs16.x
      LicenseInfo: 'MIT'
      RetentionPolicy: Retain

Outputs:
  Ec2StatusControllerFunction:
    Description: "EC2 Status Controller Lambda Function ARN"
    Value: !GetAtt Ec2StatusControllerFunction.Arn
  Ec2StatusControllerFunctionIamRole:
    Description: "Implicit IAM Role created for EC2 Status Controller function"
    Value: !GetAtt Ec2StatusControllerFunctionRole.Arn
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  DiscordEC2ServerManagerApi:
    Description: "API Gateway endpoint URL for Prod stage to trigger Bot Request Handler function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  BotRequestHandlerFunction:
    Description: "Bot Request Handler Lambda Function ARN"
    Value: !GetAtt BotRequestHandlerFunction.Arn
  BotRequestHandlerFunctionIamRole:
    Description: "Implicit IAM Role created for Bot Request Handler function"
    Value: !GetAtt BotRequestHandlerFunctionRole.Arn
